{"ast":null,"code":"var _jsxFileName = \"/Users/ricardoquintanar/react-fast/my-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport Card from \"./components/Card/Card\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Jumbo from \"./components/Jumbo/Jumbo\";\nimport Nav from \"./components/Nav/Nav\";\nimport images from \"./images.json\";\nlet guessesArr = [];\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      images,\n      score: 0,\n      topScore: 0,\n      clicked: guessesArr\n    };\n\n    this.handleClick = id => {\n      console.log(id);\n      this.updateScore(id);\n      this.shuffleCards(images);\n    };\n\n    this.updateScore = guess => {\n      let score = this.state.score;\n      let topScore = this.state.topScore; // INCREASE SCORE\n\n      if (!guessesArr.includes(guess)) {\n        guessesArr.push(guess);\n        score++;\n\n        if (score >= topScore) {\n          topScore = score;\n        }\n\n        console.log('guessesArr', guessesArr);\n        console.log('score', score);\n        console.log('topscore', topScore); // WIN\n\n        if (guessesArr.length === images.length) {\n          alert(\"YOU WIN!!!\");\n          score = 0;\n          guessesArr = [];\n        }\n\n        ; // UPDATE SCORE STATE\n\n        this.setState({\n          score: score,\n          topScore: topScore,\n          clicked: guessesArr\n        }); // USER CLICKED THE SAME IMAGE - INCORRECT\n      } else {\n        alert(\"You lost :( Try again!!!\");\n        guessesArr = []; // UPDATE SCORE STATE\n\n        this.setState({\n          score: 0,\n          topScore: this.state.topScore,\n          clicked: guessesArr\n        });\n      }\n\n      ;\n    };\n\n    this.shuffleCards = images => {\n      for (let i = images.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        var _ref = [images[j], images[i]];\n        images[i] = _ref[0];\n        images[j] = _ref[1];\n      }\n\n      return this.setState({\n        images\n      });\n    };\n  }\n\n  // RENDER CARD COMPONENT FOR EACH IMAGE\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(Jumbo, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.images.map(friend => React.createElement(Card, {\n      handleClick: this.handleClick,\n      id: friend.id,\n      key: friend.id,\n      name: friend.name,\n      image: friend.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ricardoquintanar/react-fast/my-app/src/App.js"],"names":["React","Component","Card","Wrapper","Jumbo","Nav","images","guessesArr","App","state","score","topScore","clicked","handleClick","id","console","log","updateScore","shuffleCards","guess","includes","push","length","alert","setState","i","j","Math","floor","random","render","map","friend","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"./components/Card/Card\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Jumbo from \"./components/Jumbo/Jumbo\";\nimport Nav from \"./components/Nav/Nav\";\nimport images from \"./images.json\";\n\nlet guessesArr = [];\n\nclass App extends Component {\n  // SETTING STATE\n  state = {\n    images,\n    score: 0,\n    topScore: 0,\n    clicked: guessesArr,\n  };\n\n  handleClick = id => {\n    console.log(id);\n    this.updateScore(id)\n    this.shuffleCards(images)\n  }\n\n  updateScore = guess => {\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    // INCREASE SCORE\n    if (!guessesArr.includes(guess)) {\n      guessesArr.push(guess);\n      score++\n      if (score >= topScore) {\n        topScore = score;\n      }\n\n      console.log('guessesArr', guessesArr);\n      console.log('score', score);\n      console.log('topscore', topScore);\n\n      // WIN\n      if (guessesArr.length === images.length) {\n        alert(\"YOU WIN!!!\");\n        score = 0;\n        guessesArr = [];\n      };\n      // UPDATE SCORE STATE\n      this.setState({\n        score: score,\n        topScore: topScore,\n        clicked: guessesArr\n      });\n\n      // USER CLICKED THE SAME IMAGE - INCORRECT\n    } else {\n      alert(\"You lost :( Try again!!!\");\n      guessesArr = [];\n      // UPDATE SCORE STATE\n      this.setState({\n        score: 0,\n        topScore: this.state.topScore,\n        clicked: guessesArr\n      });\n    };\n  }\n\n  // SHUFFLE IMAGES\n  shuffleCards = images => {\n    for (let i = images.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [images[i], images[j]] = [images[j], images[i]];\n    }\n    return this.setState({ images })\n  };\n\n  // RENDER CARD COMPONENT FOR EACH IMAGE\n  render() {\n    return (\n      <div>\n        <Nav score={this.state.score} topScore={this.state.topScore} />\n        <Jumbo></Jumbo>\n        <Wrapper>\n          {this.state.images.map(friend => (\n            <Card\n              handleClick={this.handleClick}\n              id={friend.id}\n              key={friend.id}\n              name={friend.name}\n              image={friend.image}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}